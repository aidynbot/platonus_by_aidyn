import json
import os
import re
from datetime import datetime
from telebot import TeleBot

TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(TOKEN)

# === –ö–æ–º–∞–Ω–¥—ã /start –∏ /delete –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ===
# –í GitHub Actions –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç, –º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
        "08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101\n"
        "09:40 –§–∏–∑–∏–∫–∞ 203\n\n"
        "–í—Ç–æ—Ä–Ω–∏–∫:\n"
        "08:00 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 202\n\n"
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤–≤–µ–¥–∏ /delete"
    )

@bot.message_handler(commands=['delete'])
def delete_schedule(message):
    path = f"data/{message.chat.id}.json"
    if os.path.exists(path):
        os.remove(path)
        bot.send_message(message.chat.id, "üóë –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ!")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

@bot.message_handler(func=lambda m: True)
def handle_schedule(message):
    text = message.text.strip()
    if not text:
        return
    schedule = parse_schedule(text)
    if schedule:
        save_schedule(message.chat.id, schedule)
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# === –ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def parse_schedule(text):
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    schedule = {}
    current_day = None

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
        day = next((d for d in days if d in line.lower()), None)
        if day:
            current_day = day.capitalize()
            schedule[current_day] = []
        elif current_day:
            match = re.match(r"(\d{1,2}:\d{2})\s+(.+)\s+(\d+)", line)
            if match:
                time_str, subject, room = match.groups()
                schedule[current_day].append({
                    "time": time_str,
                    "subject": subject.strip(),
                    "room": room.strip()
                })
    return schedule if schedule else None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def save_schedule(user_id, schedule):
    os.makedirs("data", exist_ok=True)
    path = f"data/{user_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def load_schedule(user_id):
    path = f"data/{user_id}.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# === –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è GitHub Actions) ===
def notification_worker():
    days_map = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    now = datetime.now()
    day_name = days_map[now.weekday()]

    for filename in os.listdir("data"):
        if not filename.endswith(".json"):
            continue
        user_id = int(filename.split(".")[0])
        schedule = load_schedule(user_id)
        today_schedule = schedule.get(day_name, [])
        if not today_schedule:
            continue

        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
        today_schedule_sorted = sorted(
            today_schedule,
            key=lambda x: datetime.strptime(x["time"], "%H:%M")
        )

        for lesson in today_schedule_sorted:
            lesson_time = datetime.strptime(lesson["time"], "%H:%M").replace(
                year=now.year, month=now.month, day=now.day
            )
            diff_minutes = (lesson_time - now).total_seconds() / 60

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å
            if 55 <= diff_minutes <= 60:
                bot.send_message(
                    user_id,
                    f"‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å: {lesson['subject']} –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {lesson['room']} ({lesson['time']})"
                )

            # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç
            if 4 <= diff_minutes <= 6:
                bot.send_message(
                    user_id,
                    f"‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç: {lesson['subject']} –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {lesson['room']} ({lesson['time']})"
                )

# === –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–¥–∏–Ω —Ä–∞–∑ ===
if __name__ == "__main__":
    notification_worker()
    print("GitHub Actions run finished.")
