import json
import os
import re
from datetime import datetime
from telebot import TeleBot

TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(TOKEN)

# === –ö–æ–º–∞–Ω–¥—ã /start –∏ /delete –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ ===
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
        "08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101\n"
        "09:40 –§–∏–∑–∏–∫–∞ 203\n\n"
        "–í—Ç–æ—Ä–Ω–∏–∫:\n"
        "08:00 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 202\n\n"
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤–≤–µ–¥–∏ /delete"
    )

@bot.message_handler(commands=['delete'])
def delete_schedule(message):
    path = f"data/{message.chat.id}.json"
    if os.path.exists(path):
        os.remove(path)
        bot.send_message(message.chat.id, "üóë –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ!")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

@bot.message_handler(func=lambda m: True)
def handle_schedule(message):
    text = message.text.strip()
    if not text:
        return
    schedule = parse_schedule(text)
    if schedule:
        save_schedule(message.chat.id, schedule)
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# === –ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def parse_schedule(text):
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    schedule = {}
    current_day = None

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —Å—Ç—Ä–æ–∫–∞ –Ω–∞–∑–≤–∞–Ω–∏–µ–º –¥–Ω—è
        day = next((d for d in days if line.lower().startswith(d)), None)
        if day:
            current_day = day.capitalize()
            schedule[current_day] = []
        elif current_day:
            # –ì–∏–±–∫–∏–π –ø–∞—Ä—Å–µ—Ä: –Ω–æ–º–µ—Ä –∞—É–¥–∏—Ç–æ—Ä–∏–∏ –æ–ø—Ü–∏–æ–Ω–∞–ª–µ–Ω
            match = re.match(r"(\d{1,2}:\d{2})\s+(.+?)(?:\s+([A-Za-z–ê-–Ø–∞-—è0-9,\s]+))?$", line)
            if match:
                time_str = match.group(1)
                subject = match.group(2).strip()
                room = match.group(3).strip() if match.group(3) else "–ù–µ —É–∫–∞–∑–∞–Ω–∞"
                
                # –í–∞–ª–∏–¥–∞—Ü–∏—è –≤—Ä–µ–º–µ–Ω–∏
                try:
                    datetime.strptime(time_str, "%H:%M")
                    schedule[current_day].append({
                        "time": time_str,
                        "subject": subject,
                        "room": room
                    })
                except ValueError:
                    continue
    
    return schedule if schedule else None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ/–∑–∞–≥—Ä—É–∑–∫–∞ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def save_schedule(user_id, schedule):
    os.makedirs("data", exist_ok=True)
    path = f"data/{user_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def load_schedule(user_id):
    path = f"data/{user_id}.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

# === –ó–∞–≥—Ä—É–∑–∫–∞/—Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π ===
def load_sent_notifications():
    path = "data/sent_notifications.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return set(json.load(f))
    return set()

def save_sent_notifications(sent_set):
    os.makedirs("data", exist_ok=True)
    path = "data/sent_notifications.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(list(sent_set), f)

# === –§—É–Ω–∫—Ü–∏—è —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π (–¥–ª—è GitHub Actions) ===
def notification_worker():
    days_map = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    now = datetime.now()
    day_name = days_map[now.weekday()]
    today_date = now.strftime("%Y-%m-%d")
    
    # –ó–∞–≥—Ä—É–∂–∞–µ–º –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    sent_notifications = load_sent_notifications()
    new_notifications = set()

    print(f"[{now}] Running notification worker for {day_name}")

    if not os.path.exists("data"):
        print("No data directory found")
        return

    for filename in os.listdir("data"):
        if not filename.endswith(".json") or filename == "sent_notifications.json":
            continue
        
        user_id = int(filename.split(".")[0])
        
        try:
            schedule = load_schedule(user_id)
            today_schedule = schedule.get(day_name, [])
            
            if not today_schedule:
                continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            today_schedule_sorted = sorted(
                today_schedule,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )

            for lesson in today_schedule_sorted:
                try:
                    lesson_time = datetime.strptime(lesson["time"], "%H:%M").replace(
                        year=now.year, month=now.month, day=now.day
                    )
                    diff_minutes = (lesson_time - now).total_seconds() / 60

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å (–æ–∫–Ω–æ 50-70 –º–∏–Ω—É—Ç)
                    notification_1h_key = f"{user_id}_{today_date}_{lesson['time']}_1h"
                    if 50 <= diff_minutes <= 70 and notification_1h_key not in sent_notifications:
                        try:
                            bot.send_message(
                                user_id,
                                f"‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å: {lesson['subject']}\n"
                                f"üìç –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
                                f"üïê –í—Ä–µ–º—è: {lesson['time']}"
                            )
                            new_notifications.add(notification_1h_key)
                            print(f"Sent 1h notification to {user_id} for {lesson['time']}")
                        except Exception as e:
                            print(f"Failed to send 1h notification to {user_id}: {e}")

                    # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 5 –º–∏–Ω—É—Ç (–æ–∫–Ω–æ 3-7 –º–∏–Ω—É—Ç)
                    notification_5m_key = f"{user_id}_{today_date}_{lesson['time']}_5m"
                    if 3 <= diff_minutes <= 7 and notification_5m_key not in sent_notifications:
                        try:
                            bot.send_message(
                                user_id,
                                f"üîî –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç: {lesson['subject']}\n"
                                f"üìç –ê—É–¥–∏—Ç–æ—Ä–∏—è: {lesson['room']}\n"
                                f"üïê –í—Ä–µ–º—è: {lesson['time']}"
                            )
                            new_notifications.add(notification_5m_key)
                            print(f"Sent 5m notification to {user_id} for {lesson['time']}")
                        except Exception as e:
                            print(f"Failed to send 5m notification to {user_id}: {e}")
                
                except Exception as e:
                    print(f"Error processing lesson for {user_id}: {e}")
                    continue
        
        except Exception as e:
            print(f"Error loading schedule for {user_id}: {e}")
            continue
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–æ–≤—ã–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è
    if new_notifications:
        sent_notifications.update(new_notifications)
        save_sent_notifications(sent_notifications)
        print(f"Saved {len(new_notifications)} new notifications")

# === –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –æ–¥–∏–Ω —Ä–∞–∑ ===
if __name__ == "__main__":
    notification_worker()
    print("GitHub Actions run finished.")
