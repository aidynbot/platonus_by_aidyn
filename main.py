import json
import os
import re
import threading
import time
from datetime import datetime, timedelta
from telebot import TeleBot
TOKEN = os.getenv("BOT_TOKEN")
bot = TeleBot(TOKEN)

# === –ö–æ–º–∞–Ω–¥–∞ /start ===
@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "–ü—Ä–∏–≤–µ—Ç üëã\n"
        "–Ø –±–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –±—É–¥–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞—Ç—å —Ç–µ–±–µ –æ –∑–∞–Ω—è—Ç–∏—è—Ö.\n\n"
        "–û—Ç–ø—Ä–∞–≤—å —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ –Ω–∞ –Ω–µ–¥–µ–ª—é –≤ —Ñ–æ—Ä–º–∞—Ç–µ:\n\n"
        "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫:\n"
        "08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101\n"
        "09:40 –§–∏–∑–∏–∫–∞ 203\n\n"
        "–í—Ç–æ—Ä–Ω–∏–∫:\n"
        "08:00 –ê–Ω–≥–ª–∏–π—Å–∫–∏–π 202\n\n"
        "–ß—Ç–æ–±—ã —É–¥–∞–ª–∏—Ç—å —Å—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ ‚Äî –≤–≤–µ–¥–∏ /delete"
    )

# === –ö–æ–º–∞–Ω–¥–∞ /delete ===
@bot.message_handler(commands=['delete'])
def delete_schedule(message):
    path = f"data/{message.chat.id}.json"
    if os.path.exists(path):
        os.remove(path)
        bot.send_message(message.chat.id, "üóë –°—Ç–∞—Ä–æ–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ. –ú–æ–∂–µ—à—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –Ω–æ–≤–æ–µ!")
    else:
        bot.send_message(message.chat.id, "–£ —Ç–µ–±—è –µ—â—ë –Ω–µ—Ç —Å–æ—Ö—Ä–∞–Ω—ë–Ω–Ω–æ–≥–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è.")

# === –û–±—Ä–∞–±–æ—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞ (—Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è) ===
@bot.message_handler(func=lambda m: True)
def handle_schedule(message):
    text = message.text.strip()
    if not text:
        return
    schedule = parse_schedule(text)
    if schedule:
        save_schedule(message.chat.id, schedule)
        bot.send_message(message.chat.id, "‚úÖ –†–∞—Å–ø–∏—Å–∞–Ω–∏–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ!")
    else:
        bot.send_message(message.chat.id, "–ù–µ —Å–º–æ–≥ –ø–æ–Ω—è—Ç—å —Ñ–æ—Ä–º–∞—Ç. –ü–æ–ø—Ä–æ–±—É–π —Å–Ω–æ–≤–∞.")

# === –ü–∞—Ä—Å–µ—Ä —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def parse_schedule(text):
    days = ["–ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫","–≤—Ç–æ—Ä–Ω–∏–∫","—Å—Ä–µ–¥–∞","—á–µ—Ç–≤–µ—Ä–≥","–ø—è—Ç–Ω–∏—Ü–∞","—Å—É–±–±–æ—Ç–∞","–≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"]
    schedule = {}
    current_day = None

    for line in text.splitlines():
        line = line.strip()
        if not line:
            continue
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–µ–Ω—å
        day = next((d for d in days if d in line.lower()), None)
        if day:
            current_day = day.capitalize()
            schedule[current_day] = []
        elif current_day:
            # –ü—Ä–∏–º–µ—Ä —Å—Ç—Ä–æ–∫–∏: "08:00 –ú–∞—Ç–µ–º–∞—Ç–∏–∫–∞ 101"
            match = re.match(r"(\d{1,2}:\d{2})\s+(.+)\s+(\d+)", line)
            if match:
                time, subject, room = match.groups()
                schedule[current_day].append({
                    "time": time,
                    "subject": subject.strip(),
                    "room": room.strip()
                })
    return schedule if schedule else None

# === –°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è ===
def save_schedule(user_id, schedule):
    os.makedirs("data", exist_ok=True)
    path = f"data/{user_id}.json"
    with open(path, "w", encoding="utf-8") as f:
        json.dump(schedule, f, ensure_ascii=False, indent=2)

def load_schedule(user_id):
    path = f"data/{user_id}.json"
    if os.path.exists(path):
        with open(path, "r", encoding="utf-8") as f:
            return json.load(f)
    return {}

##
# ======== –ë–ª–æ–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π =========
def notification_worker():
    days_map = {
        0: "–ü–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫",
        1: "–í—Ç–æ—Ä–Ω–∏–∫",
        2: "–°—Ä–µ–¥–∞",
        3: "–ß–µ—Ç–≤–µ—Ä–≥",
        4: "–ü—è—Ç–Ω–∏—Ü–∞",
        5: "–°—É–±–±–æ—Ç–∞",
        6: "–í–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ"
    }

    notified = {}  # —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –æ—Ç–ø—Ä–∞–≤–∫–∏

    while True:
        now = datetime.now()
        day_name = days_map[now.weekday()]

        for filename in os.listdir("data"):
            if not filename.endswith(".json"):
                continue
            user_id = int(filename.split(".")[0])
            schedule = load_schedule(user_id)
            today_schedule = schedule.get(day_name, [])

            if not today_schedule:
                continue

            # –°–æ—Ä—Ç–∏—Ä—É–µ–º –ø–∞—Ä—ã –ø–æ –≤—Ä–µ–º–µ–Ω–∏
            today_schedule_sorted = sorted(
                today_schedule,
                key=lambda x: datetime.strptime(x["time"], "%H:%M")
            )

            # ==== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –∑–∞ 1 —á–∞—Å —Ç–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤–æ–π –ø–∞—Ä—ã ====
            first_lesson = today_schedule_sorted[0]
            lesson_time = datetime.strptime(first_lesson["time"], "%H:%M").replace(
                year=now.year, month=now.month, day=now.day
            )
            key_60 = f"{user_id}-{lesson_time}-60"
            if 59 <= (lesson_time - now).total_seconds() / 60 <= 60 and key_60 not in notified:
                bot.send_message(
                    user_id,
                    f"‚è∞ –ß–µ—Ä–µ–∑ 1 —á–∞—Å: {first_lesson['subject']} –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {first_lesson['room']} ({first_lesson['time']})"
                )
                notified[key_60] = True

            # ==== –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –∑–∞ 5 –º–∏–Ω—É—Ç –¥–ª—è –≤—Å–µ—Ö –ø–∞—Ä ====
            for lesson in today_schedule_sorted:
                lesson_time_5 = datetime.strptime(lesson["time"], "%H:%M").replace(
                    year=now.year, month=now.month, day=now.day
                )
                key_5 = f"{user_id}-{lesson_time_5}-5"
                if 4 <= (lesson_time_5 - now).total_seconds() / 60 <= 5 and key_5 not in notified:
                    bot.send_message(
                        user_id,
                        f"‚è∞ –ß–µ—Ä–µ–∑ 5 –º–∏–Ω—É—Ç: {lesson['subject']} –≤ –∞—É–¥–∏—Ç–æ—Ä–∏–∏ {lesson['room']} ({lesson['time']})"
                    )
                    notified[key_5] = True

        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—É—é –º–∏–Ω—É—Ç—É
        time.sleep(60)
#

# ======== –ó–∞–ø—É—Å–∫ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ =========
notification_thread = threading.Thread(target=notification_worker, daemon=True)
notification_thread.start()
#

print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω!")
bot.polling()
